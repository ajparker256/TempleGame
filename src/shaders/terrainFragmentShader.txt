#version 400 core

in vec2 pass_textureCords;
in vec3 surfaceNormal;
in vec3 toLightVector;
in vec3 toCameraVector;
in float visibility;


out vec4 out_Color;

uniform sampler2D backgroundTexture;
uniform sampler2D rTexture;
uniform sampler2D gTexture;
uniform sampler2D bTexture;
uniform sampler2D blendMap;

uniform vec3 lightColor;
uniform float shineDamper;
uniform float reflectivity;
uniform float ambient;
uniform vec3 skyColor;

void main(void){

	vec4 blendMapColor = texture(blendMap,pass_textureCords);
	
	float backgroundTextureAmount = 1- (blendMapColor.r+blendMapColor.g+blendMapColor.b);
	vec2 tiledCords = pass_textureCords * 40.0;
	vec4 backgroundColor = texture(backgroundTexture, tiledCords) *backgroundTextureAmount;
	vec4 rTextureColor = texture(rTexture,tiledCords) *blendMapColor.r;
	vec4 gTextureColor = texture(gTexture,tiledCords) *blendMapColor.g;
	vec4 bTextureColor = texture(bTexture,tiledCords) *blendMapColor.b;
	
	vec4 totalColor = backgroundColor+rTextureColor+gTextureColor+bTextureColor;

vec3 unitNormal = normalize(surfaceNormal);
vec3 unitLightVector = normalize(toLightVector);

float nDot1 = dot(unitNormal,unitLightVector);
float brightness = max(nDot1,0.0);
vec3 diffuse = brightness * lightColor;

vec3 unitVectorToCamera = normalize(toCameraVector);
vec3 lightDirection = -unitLightVector;
vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);

float specularFactor = dot(reflectedLightDirection , unitVectorToCamera);
specularFactor = max(specularFactor,ambient);
float dampedFactor = pow(specularFactor,shineDamper);    
vec3 finalSpecular = dampedFactor * reflectivity *lightColor;
out_Color= vec4(diffuse,1.0)*totalColor+ vec4(finalSpecular,1.0);
out_Color= mix(vec4(skyColor,1.0),out_Color,visibility);
}